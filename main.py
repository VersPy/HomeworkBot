import datetime as dt
import sqlite3
from random import randint

import telebot
from telebot import types

from JOKES import JOKES

token = '<TOKEN>'
bot = telebot.TeleBot(token)

CODE = None
PASSWORD = None
ADMIN_PASSWORD = None
ID = None

LESSON_TITLE = None
HOMEWORK = None
DATE = None


@bot.message_handler(commands=['start'])
def start_message(message):
    db_add_user(message=message)
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–ó –ë–û–¢')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É")
    item2 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É')
    markup.add(item1)
    markup.add(item2)
    bot.send_message(message.chat.id, '–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å', reply_markup=markup)


@bot.message_handler(commands=['button'])
def button_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ö–Ω–æ–ø–∫–∞")
    item2 = types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    markup.add(item1)
    markup.add(item2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω–∞–¥–æ', reply_markup=markup)


@bot.message_handler(content_types='text')
def message_reply(message):
    if message.text == "–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, sign_in_code)
    if message.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É":
        bot.send_message(message.chat.id, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, log_in_title)


@bot.message_handler(content_types='text')
def sign_in_code(message):
    global CODE
    CODE = message.text
    print(message.text)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã:')

    bot.register_next_step_handler(message, sign_in_password)


@bot.message_handler(content_types='text')
def sign_in_password(message):
    global PASSWORD, ID, ADMIN_PASSWORD
    PASSWORD = message.text
    print(message.text)
    res = db()
    if res:
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!!!')
        main_window(message)
        ID = res[0][0]
        ADMIN_PASSWORD = res[0][-1]
        # bot.register_next_step_handler(message, main_window)
    else:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∫–æ–¥.')


@bot.message_handler(content_types='text')
def log_in_title(message):
    global CODE
    print(message.text)
    CODE = message.text
    if db_ne_znayu():
        bot.send_message(message.chat.id, '–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
        bot.send_message(message.chat.id, '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:')
        bot.register_next_step_handler(message, log_in_password)
    else:
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π –∫–æ–¥ —É–∂–µ –µ—Å—Ç—å\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π')
        start_message(message)


@bot.message_handler(content_types='text')
def log_in_password(message):
    global PASSWORD
    bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
    bot.send_message(message.chat.id, '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    print(message.text)
    PASSWORD = message.text
    bot.register_next_step_handler(message, log_in_admin_code)


@bot.message_handler(content_types='text')
def log_in_admin_code(message):
    print(message.text)
    global ADMIN_PASSWORD, ID
    ADMIN_PASSWORD = message.text
    bot.send_message(message.chat.id, '–ö–æ–¥ –∞–¥–º–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
    db_create()
    bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É!!!')
    ID = db()[0][0]
    main_window(message)


@bot.message_handler(content_types='text')
def main_window(message):
    STATUS = db_status(message)
    if STATUS == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –î–óüéì")
        item2 = types.KeyboardButton('–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Çü§£')
        item3 = types.KeyboardButton('–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–ºüëë')
        markup.add(item1, item2)
        markup.add(item3)
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∏—Ç–µ:', reply_markup=markup)
        bot.register_next_step_handler(message, main_window_but)

    elif STATUS == '–ê–¥–º–∏–Ω':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –î–óüéì")
        item2 = types.KeyboardButton('–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Çü§£')
        item3 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µüìù')
        markup.add(item1, item2)
        markup.add(item3)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ:', reply_markup=markup)
        bot.register_next_step_handler(message, main_window_but)


@bot.message_handler(content_types='text')
def main_window_but(message):
    if message.text == '–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Çü§£':
        bot.send_message(message.chat.id, JOKES[randint(0, len(JOKES) - 1)])
        main_window(message)
    if message.text == '–ü–æ–ª—É—á–∏—Ç—å –î–óüéì':
        bot.send_message(message.chat.id, '–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:')
        homeworks = db_search_homework()
        lst = []
        for i in homeworks:
            if dt.date(*[int(j) for j in i[-1].split('.')]) > dt.datetime.now().date():
                lst.append(f'{i[0]}: {i[1]}; —Å–¥–µ–ª–∞—Ç—å –¥–æ {i[2]}')
        bot.send_message(message.chat.id, '\n'.join(lst))
        main_window(message)
    if message.text == '–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–ºüëë':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, admin_exam)
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µüìù':
        bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, add_homework_step_one)


@bot.message_handler(content_types='text')
def admin_exam(message):
    global ADMIN_PASSWORD
    print(message.text)
    if str(ADMIN_PASSWORD) == message.text:
        db_change_status(message)
        bot.send_message(message.chat.id, '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω')
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')
    main_window(message)


@bot.message_handler(content_types='text')
def add_homework_step_one(message):
    global LESSON_TITLE
    LESSON_TITLE = message.text
    bot.send_message(message.chat.id, '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:')
    bot.register_next_step_handler(message, add_homework_step_two)


@bot.message_handler(content_types='text')
def add_homework_step_two(message):
    global HOMEWORK
    HOMEWORK = message.text
    bot.send_message(message.chat.id, '–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞(–ì–ì–ì–ì.–ú–ú.–î–î):')
    bot.register_next_step_handler(message, add_homework_step_three)


@bot.message_handler(content_types='text')
def add_homework_step_three(message):
    global DATE
    DATE = message.text
    db_new_homework()
    bot.send_message(message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    main_window(message)


def db_create():
    global CODE, PASSWORD, ADMIN_PASSWORD
    con = sqlite3.connect("datebase.db")
    cur = con.cursor()
    cur.execute(f'''INSERT INTO rooms(room_code, room_password,rooms_admins_password) 
                      VALUES("{CODE}", "{PASSWORD}", "{ADMIN_PASSWORD}")''').fetchall()
    con.commit()


def db():
    global CODE, PASSWORD
    con = sqlite3.connect("datebase.db")
    cur = con.cursor()
    result = cur.execute(f'''SELECT * FROM rooms 
                            WHERE room_code = "{CODE}" AND  room_password = "{PASSWORD}"''').fetchall()
    print(result)
    if result:
        return result
    else:
        return False


def db_new_homework():
    global ID, LESSON_TITLE, HOMEWORK, DATE
    con = sqlite3.connect("datebase.db")
    cur = con.cursor()
    cur.execute(f'''INSERT INTO homework(room_id, lesson, homework, date) 
                      VALUES("{ID}", "{LESSON_TITLE}", "{HOMEWORK}", "{DATE}")''').fetchall()
    con.commit()


def db_search_homework():
    con = sqlite3.connect("datebase.db")
    cur = con.cursor()
    result = cur.execute(f'''SELECT lesson, homework, date FROM homework 
                            WHERE room_id = "{ID}"''').fetchall()
    return result


def db_ne_znayu():
    con = sqlite3.connect("datebase.db")
    cur = con.cursor()
    result = cur.execute(f'''SELECT room_password FROM rooms 
                                WHERE room_code = "{CODE}"''').fetchall()
    print(result)
    if result:
        return False
    else:
        return True


def db_add_user(message):
    if func(message):
        con = sqlite3.connect("datebase.db")
        cur = con.cursor()
        cur.execute(f'''INSERT INTO users(user_id, status, first_name, last_name, username) 
                              VALUES({message.from_user.id}, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "{message.from_user.first_name}",
                               "{message.from_user.last_name}", "{message.from_user.username}")''').fetchall()
        con.commit()


def db_change_status(message):
    con = sqlite3.connect("datebase.db")
    cur = con.cursor()
    cur.execute(f'''UPDATE users SET status="–ê–¥–º–∏–Ω" WHERE user_id = {message.from_user.id}''').fetchall()
    con.commit()


def db_status(message):
    con = sqlite3.connect("datebase.db")
    cur = con.cursor()
    result = cur.execute(f'''SELECT status FROM users 
                                        WHERE user_id = {message.from_user.id}''').fetchall()
    return result[0][0]


def func(message):
    con = sqlite3.connect("datebase.db")
    cur = con.cursor()
    result = cur.execute(f'''SELECT * FROM users 
                                    WHERE user_id = {message.from_user.id}''').fetchall()
    if result:
        return False
    else:
        return True


if __name__ == '__main__':
    bot.infinity_polling()
